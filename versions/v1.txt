package main

import (
	"fmt"
	"math"
	"sync"
)

func squared(c chan float64) float64 {
	val := <-c
	return math.Pow(float64(val), 2)
}

func newSlice(s []float64) []float64 {
	var wg sync.WaitGroup

	ns := make([]float64, 0, cap(s))
	c := make(chan float64)

	for _, v := range s {
		wg.Add(1)
		go func() {
			defer wg.Done()
			ns = append(ns, squared(c))
		}()
		c <- v
	}
	wg.Wait()
	return ns
}

func main() {
	list := []float64{1, 2, 3, 4, 5, 6}
	fmt.Println(list, newSlice(list))
}
